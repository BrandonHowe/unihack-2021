import "./TreePage.css"
import logo from "../../assets/logo.png";
import Icon from '@mdi/react';
import { mdiChevronDown } from '@mdi/js';
import knowledge from "../../assets/knowledge.png";
import { useState } from "react";

interface ITree {
    name: string;
    image: string;
    nodes: ITreeNode[];
}

interface ITreeNode {
    name: string;
    topics: string[]
    children: ITreeNode[];
}

function TreeNode({ name, topics, children }: ITreeNode) {
    const [opened, setOpened] = useState(false);

    const levels: ITreeNode[][] = [];
    let currentLevel = children;
    let nextLevel = [];

    while (currentLevel.length !== 0) {
        levels.push([]);
        for (const node of currentLevel) {
            nextLevel.push(...node.children);
        }
        levels[levels.length - 1] = [...currentLevel];
        currentLevel = [...nextLevel];
        nextLevel = [];
    }

    console.log(levels);

    const childWidth = levels.reduce((acc, cur) => acc > cur.length ? acc : cur.length, 0);

    return <div className="treeNodeArea" style={{ width: 300 * childWidth - 100 }}>
        <div className={`treeNode${opened ? " expanded" : ""}`}>
            <h3 className="treeNodeText">{ name }</h3>
            <div onClick={() => setOpened(!opened)}>
                <Icon
                    path={mdiChevronDown}
                    size={1}
                    color="#929292"
                    className="treeNodeIcon"
                />
            </div>
            {
                opened && topics.map(topic => (
                    <div key={`treeNodeTopic${topic}`} className="treeNodeTopic">{topic}</div>
                ))
            }
            {
                opened && <div className="treeNodeTopic" style={{ color: "#4565EF" }}>See all...</div>
            }
        </div>
    </div>
}

function TreeLevel({ contents, firstLevel }: { contents: ITreeNode[], firstLevel: boolean }) {
    return <div className="treeLevel">
        {
            contents.map(j => (
                <div className="treeNodeContainer">
                    { !firstLevel && <div className="treeNodeTopRow">
                        <div className="treeNodeTopRowBox"></div>
                        <div className="treeNodeTopRowBox"></div>
                    </div>}
                    <TreeNode {...j} />
                    { j.children.length !== 0 && <div className="treeNodeBottomRow">
                        <div className="treeNodeBottomRowBox"></div>
                        <div className="treeNodeBottomRowBox"></div>
                    </div>}
                </div>
            ))
        }
    </div>;
}

export default function TreePage() {
    const tree: ITree = {
        name: "Mathematics",
        image: knowledge,
        nodes: [
            {
                name: "Pre-Algebra",
                topics: [],
                children: [
                    {
                        name: "Geometry",
                        children: [],
                        topics: [],
                    },
                    {
                        name: "Algebra",
                        children: [
                            {
                                name: "Algebra II",
                                children: [],
                                topics: []
                            },
                            {
                                name: "Trigonometry",
                                children: [],
                                topics: []
                            }
                        ],
                        topics: ["Factoring", "Ratios", "Patterns"]
                    },
                    {
                        name: "Number theory",
                        children: [],
                        topics: []
                    },
                    {
                        name: "Counting",
                        children: [],
                        topics: []
                    }
                ]
            }
        ]
    }
    
    const levels: ITreeNode[][] = [];
    let currentLevel = tree.nodes;
    let nextLevel = [];

    while (currentLevel.length !== 0) {
        levels.push([]);
        for (const node of currentLevel) {
            nextLevel.push(...node.children);
        }
        levels[levels.length - 1] = [...currentLevel];
        currentLevel = [...nextLevel];
        nextLevel = [];
    }

    console.log(levels);

    return <div className="treePage">
        <div className="landingPageLogo">
            <img src={logo} alt="Logo" />
            <div className="treeHeader">
                <img src={tree.image} alt="TreeImage" />
                <h3>{tree.name}</h3>
            </div>
            { levels.map((contents, idx) => <TreeLevel firstLevel={idx === 0} contents={contents} />)}
        </div>
    </div>
}

.treePage {
    background-color: #454950;
    min-height: 100vh;
    font-family: "Whitney";
}

.landingPageLogo > img {
    margin-top: 50px;
    width: 400px;
}

.treeHeader {
    width: 190px;
    background-color: #36393D;
    border-radius: 10px;
    height: 50px;
    padding: 15px;
    margin: 20px auto;
    line-height: 0px;
    cursor: pointer;
    box-shadow: 0 1px 1px 0 #36393D;
    display: flex;
}

.treeHeader > img {
    height: 50px;
}

.treeHeader > h3 {
    margin: auto;
}

.treeNodeArea {
    width: 200px;
    margin: 0 50px;
}

.treeNode {
    width: 200px;
    background-color: #36393D;
    border-radius: 10px;
    height: 30px;
    font-size: 18px;
    margin: auto;
    cursor: pointer;
    font-weight: bold;
    box-shadow: 0 1px 1px 0 #36393D;
    padding: 10px;
    position: relative;
    transition: all .3s ease;
    overflow: hidden;
}

.treeNode.expanded {
    height: 190px;
}

.treeNodeText {
    height: 30px;
    line-height: 30px;
    margin: 0;
}

.treeNodeTopic {
    margin-top: 10px;
    height: 30px;
    line-height: 30px;
    font-size: 14px;
}

.treeNodeIcon {
    position: absolute;
    right: 14px;
    top: 14px;
}

.treeLevel {
    display: flex;
    justify-content: center;
    margin: 0;
}

.treeNodeTopRow,
.treeNodeBottomRow {
    display: flex;
}

.treeNodeTopRow > div,
.treeNodeBottomRow > div {
    height: 50px;
    width: 50%;
    border-left: 3px solid #4565EF;
    border-right: 3px solid #4565EF;
}

.treeNodeTopRow > div {
    border-top: 6px solid #4565EF;
}

.treeNodeTopRow > div:first-child,
.treeNodeBottomRow > div:first-child {
    border-left: none;
    border-right: 3px solid #4565EF;
}

.treeNodeTopRow > div:last-child,
.treeNodeBottomRow > div:last-child {
    border-left: 3px solid #4565EF;
    border-right: none;
}

.treeNodeContainer:first-child .treeNodeTopRowBox:first-child {
    border-bottom: none;
    border-top: none;
    height: 56px;
}

.treeNodeContainer:last-child .treeNodeTopRowBox:last-child {
    border-bottom: none;
    border-top: none;
    height: 56px;
}